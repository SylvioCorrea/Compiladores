   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 dList main

   3  dList : decl dList
   4        |

   5  decl : defFunc
   6       | defStruct
   7       | declVar

   8  $$2 :

   9  defFunc : FUNCTION type IDENT $$2 '(' maybeParams ')' '{' corpoFunc '}'

  10  $$3 :

  11  $$4 :

  12  defStruct : DSTRUCT IDENT '{' $$3 lcampos $$4 '}' ';'

  13  $$5 :

  14  declVar : type $$5 TArray Lid ';'

  15  $$6 :

  16  declVar : STRUCT IDENT $$6 Lid ';'

  17  corpoFunc :

  18  lcampos : lcampos declVar
  19          | declVar

  20  maybeParams : lParams
  21              |

  22  lParams : lParams ',' param
  23          | param

  24  param : type IDENT
  25        | STRUCT IDENT IDENT

  26  Lid : Lid ',' id
  27      | id

  28  id : IDENT

  29  $$7 :

  30  TArray : '[' NUM ']' $$7 TArray
  31         |

  32  type : INT
  33       | DOUBLE
  34       | BOOL

  35  main : VOID MAIN '(' ')' bloco

  36  bloco : '{' listacmd '}'

  37  listacmd : listacmd cmd
  38           |

  39  cmd : exp ';'
  40      | IF '(' exp ')' '{' cmd '}'

  41  exp : exp '+' exp
  42      | exp '>' exp
  43      | exp AND exp
  44      | NUM
  45      | '(' exp ')'
  46      | IDENT
  47      | exp '=' exp
  48      | exp '[' exp ']'

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . dList main  (2)
	dList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	DSTRUCT  shift 6
	STRUCT  shift 7
	FUNCTION  shift 8
	VOID  reduce 4

	type  goto 9
	dList  goto 10
	decl  goto 11
	defFunc  goto 12
	defStruct  goto 13
	declVar  goto 14


state 3
	type : INT .  (32)

	.  reduce 32


state 4
	type : DOUBLE .  (33)

	.  reduce 33


state 5
	type : BOOL .  (34)

	.  reduce 34


state 6
	defStruct : DSTRUCT . IDENT '{' $$3 lcampos $$4 '}' ';'  (12)

	IDENT  shift 15
	.  error


state 7
	declVar : STRUCT . IDENT $$6 Lid ';'  (16)

	IDENT  shift 16
	.  error


state 8
	defFunc : FUNCTION . type IDENT $$2 '(' maybeParams ')' '{' corpoFunc '}'  (9)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	.  error

	type  goto 17


state 9
	declVar : type . $$5 TArray Lid ';'  (14)
	$$5 : .  (13)

	.  reduce 13

	$$5  goto 18


state 10
	prog : $$1 dList . main  (2)

	VOID  shift 19
	.  error

	main  goto 20


state 11
	dList : decl . dList  (3)
	dList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	DSTRUCT  shift 6
	STRUCT  shift 7
	FUNCTION  shift 8
	VOID  reduce 4

	type  goto 9
	dList  goto 21
	decl  goto 11
	defFunc  goto 12
	defStruct  goto 13
	declVar  goto 14


state 12
	decl : defFunc .  (5)

	.  reduce 5


state 13
	decl : defStruct .  (6)

	.  reduce 6


state 14
	decl : declVar .  (7)

	.  reduce 7


state 15
	defStruct : DSTRUCT IDENT . '{' $$3 lcampos $$4 '}' ';'  (12)

	'{'  shift 22
	.  error


state 16
	declVar : STRUCT IDENT . $$6 Lid ';'  (16)
	$$6 : .  (15)

	.  reduce 15

	$$6  goto 23


state 17
	defFunc : FUNCTION type . IDENT $$2 '(' maybeParams ')' '{' corpoFunc '}'  (9)

	IDENT  shift 24
	.  error


state 18
	declVar : type $$5 . TArray Lid ';'  (14)
	TArray : .  (31)

	'['  shift 25
	IDENT  reduce 31

	TArray  goto 26


state 19
	main : VOID . MAIN '(' ')' bloco  (35)

	MAIN  shift 27
	.  error


state 20
	prog : $$1 dList main .  (2)

	.  reduce 2


state 21
	dList : decl dList .  (3)

	.  reduce 3


state 22
	defStruct : DSTRUCT IDENT '{' . $$3 lcampos $$4 '}' ';'  (12)
	$$3 : .  (10)

	.  reduce 10

	$$3  goto 28


state 23
	declVar : STRUCT IDENT $$6 . Lid ';'  (16)

	IDENT  shift 29
	.  error

	Lid  goto 30
	id  goto 31


state 24
	defFunc : FUNCTION type IDENT . $$2 '(' maybeParams ')' '{' corpoFunc '}'  (9)
	$$2 : .  (8)

	.  reduce 8

	$$2  goto 32


state 25
	TArray : '[' . NUM ']' $$7 TArray  (30)

	NUM  shift 33
	.  error


state 26
	declVar : type $$5 TArray . Lid ';'  (14)

	IDENT  shift 29
	.  error

	Lid  goto 34
	id  goto 31


state 27
	main : VOID MAIN . '(' ')' bloco  (35)

	'('  shift 35
	.  error


state 28
	defStruct : DSTRUCT IDENT '{' $$3 . lcampos $$4 '}' ';'  (12)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 7
	.  error

	type  goto 9
	declVar  goto 36
	lcampos  goto 37


state 29
	id : IDENT .  (28)

	.  reduce 28


state 30
	declVar : STRUCT IDENT $$6 Lid . ';'  (16)
	Lid : Lid . ',' id  (26)

	';'  shift 38
	','  shift 39
	.  error


state 31
	Lid : id .  (27)

	.  reduce 27


state 32
	defFunc : FUNCTION type IDENT $$2 . '(' maybeParams ')' '{' corpoFunc '}'  (9)

	'('  shift 40
	.  error


state 33
	TArray : '[' NUM . ']' $$7 TArray  (30)

	']'  shift 41
	.  error


state 34
	declVar : type $$5 TArray Lid . ';'  (14)
	Lid : Lid . ',' id  (26)

	';'  shift 42
	','  shift 39
	.  error


state 35
	main : VOID MAIN '(' . ')' bloco  (35)

	')'  shift 43
	.  error


state 36
	lcampos : declVar .  (19)

	.  reduce 19


state 37
	defStruct : DSTRUCT IDENT '{' $$3 lcampos . $$4 '}' ';'  (12)
	lcampos : lcampos . declVar  (18)
	$$4 : .  (11)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 7
	'}'  reduce 11

	type  goto 9
	declVar  goto 44
	$$4  goto 45


state 38
	declVar : STRUCT IDENT $$6 Lid ';' .  (16)

	.  reduce 16


state 39
	Lid : Lid ',' . id  (26)

	IDENT  shift 29
	.  error

	id  goto 46


state 40
	defFunc : FUNCTION type IDENT $$2 '(' . maybeParams ')' '{' corpoFunc '}'  (9)
	maybeParams : .  (21)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 47
	')'  reduce 21

	type  goto 48
	maybeParams  goto 49
	lParams  goto 50
	param  goto 51


state 41
	TArray : '[' NUM ']' . $$7 TArray  (30)
	$$7 : .  (29)

	.  reduce 29

	$$7  goto 52


state 42
	declVar : type $$5 TArray Lid ';' .  (14)

	.  reduce 14


state 43
	main : VOID MAIN '(' ')' . bloco  (35)

	'{'  shift 53
	.  error

	bloco  goto 54


state 44
	lcampos : lcampos declVar .  (18)

	.  reduce 18


state 45
	defStruct : DSTRUCT IDENT '{' $$3 lcampos $$4 . '}' ';'  (12)

	'}'  shift 55
	.  error


state 46
	Lid : Lid ',' id .  (26)

	.  reduce 26


state 47
	param : STRUCT . IDENT IDENT  (25)

	IDENT  shift 56
	.  error


state 48
	param : type . IDENT  (24)

	IDENT  shift 57
	.  error


state 49
	defFunc : FUNCTION type IDENT $$2 '(' maybeParams . ')' '{' corpoFunc '}'  (9)

	')'  shift 58
	.  error


state 50
	maybeParams : lParams .  (20)
	lParams : lParams . ',' param  (22)

	','  shift 59
	')'  reduce 20


state 51
	lParams : param .  (23)

	.  reduce 23


state 52
	TArray : '[' NUM ']' $$7 . TArray  (30)
	TArray : .  (31)

	'['  shift 25
	IDENT  reduce 31

	TArray  goto 60


state 53
	bloco : '{' . listacmd '}'  (36)
	listacmd : .  (38)

	.  reduce 38

	listacmd  goto 61


state 54
	main : VOID MAIN '(' ')' bloco .  (35)

	.  reduce 35


state 55
	defStruct : DSTRUCT IDENT '{' $$3 lcampos $$4 '}' . ';'  (12)

	';'  shift 62
	.  error


state 56
	param : STRUCT IDENT . IDENT  (25)

	IDENT  shift 63
	.  error


state 57
	param : type IDENT .  (24)

	.  reduce 24


state 58
	defFunc : FUNCTION type IDENT $$2 '(' maybeParams ')' . '{' corpoFunc '}'  (9)

	'{'  shift 64
	.  error


state 59
	lParams : lParams ',' . param  (22)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 47
	.  error

	type  goto 48
	param  goto 65


state 60
	TArray : '[' NUM ']' $$7 TArray .  (30)

	.  reduce 30


state 61
	bloco : '{' listacmd . '}'  (36)
	listacmd : listacmd . cmd  (37)

	IDENT  shift 66
	NUM  shift 67
	IF  shift 68
	'('  shift 69
	'}'  shift 70
	.  error

	exp  goto 71
	cmd  goto 72


state 62
	defStruct : DSTRUCT IDENT '{' $$3 lcampos $$4 '}' ';' .  (12)

	.  reduce 12


state 63
	param : STRUCT IDENT IDENT .  (25)

	.  reduce 25


state 64
	defFunc : FUNCTION type IDENT $$2 '(' maybeParams ')' '{' . corpoFunc '}'  (9)
	corpoFunc : .  (17)

	.  reduce 17

	corpoFunc  goto 73


state 65
	lParams : lParams ',' param .  (22)

	.  reduce 22


state 66
	exp : IDENT .  (46)

	.  reduce 46


state 67
	exp : NUM .  (44)

	.  reduce 44


state 68
	cmd : IF . '(' exp ')' '{' cmd '}'  (40)

	'('  shift 74
	.  error


state 69
	exp : '(' . exp ')'  (45)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 75


state 70
	bloco : '{' listacmd '}' .  (36)

	.  reduce 36


state 71
	cmd : exp . ';'  (39)
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)

	AND  shift 76
	'='  shift 77
	'>'  shift 78
	'+'  shift 79
	'['  shift 80
	';'  shift 81
	.  error


state 72
	listacmd : listacmd cmd .  (37)

	.  reduce 37


state 73
	defFunc : FUNCTION type IDENT $$2 '(' maybeParams ')' '{' corpoFunc . '}'  (9)

	'}'  shift 82
	.  error


state 74
	cmd : IF '(' . exp ')' '{' cmd '}'  (40)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 83


state 75
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : '(' exp . ')'  (45)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)

	AND  shift 76
	'='  shift 77
	'>'  shift 78
	'+'  shift 79
	'['  shift 80
	')'  shift 84
	.  error


state 76
	exp : exp AND . exp  (43)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 85


state 77
	exp : exp '=' . exp  (47)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 86


state 78
	exp : exp '>' . exp  (42)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 87


state 79
	exp : exp '+' . exp  (41)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 88


state 80
	exp : exp '[' . exp ']'  (48)

	IDENT  shift 66
	NUM  shift 67
	'('  shift 69
	.  error

	exp  goto 89


state 81
	cmd : exp ';' .  (39)

	.  reduce 39


state 82
	defFunc : FUNCTION type IDENT $$2 '(' maybeParams ')' '{' corpoFunc '}' .  (9)

	.  reduce 9


state 83
	cmd : IF '(' exp . ')' '{' cmd '}'  (40)
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)

	AND  shift 76
	'='  shift 77
	'>'  shift 78
	'+'  shift 79
	'['  shift 80
	')'  shift 90
	.  error


state 84
	exp : '(' exp ')' .  (45)

	.  reduce 45


state 85
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp AND exp .  (43)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)

	'['  shift 80
	AND  reduce 43
	'='  reduce 43
	'>'  reduce 43
	'+'  reduce 43
	')'  reduce 43
	';'  reduce 43
	']'  reduce 43


state 86
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '=' exp  (47)
	exp : exp '=' exp .  (47)
	exp : exp . '[' exp ']'  (48)

	AND  shift 76
	'='  shift 77
	'>'  shift 78
	'+'  shift 79
	'['  shift 80
	')'  reduce 47
	';'  reduce 47
	']'  reduce 47


state 87
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp '>' exp .  (42)
	exp : exp . AND exp  (43)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)

	AND  shift 76
	'+'  shift 79
	'['  shift 80
	'='  reduce 42
	')'  reduce 42
	';'  reduce 42
	']'  reduce 42


state 88
	exp : exp . '+' exp  (41)
	exp : exp '+' exp .  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)

	AND  shift 76
	'['  shift 80
	'='  reduce 41
	'>'  reduce 41
	'+'  reduce 41
	')'  reduce 41
	';'  reduce 41
	']'  reduce 41


state 89
	exp : exp . '+' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '=' exp  (47)
	exp : exp . '[' exp ']'  (48)
	exp : exp '[' exp . ']'  (48)

	AND  shift 76
	'='  shift 77
	'>'  shift 78
	'+'  shift 79
	'['  shift 80
	']'  shift 91
	.  error


state 90
	cmd : IF '(' exp ')' . '{' cmd '}'  (40)

	'{'  shift 92
	.  error


state 91
	exp : exp '[' exp ']' .  (48)

	.  reduce 48


state 92
	cmd : IF '(' exp ')' '{' . cmd '}'  (40)

	IDENT  shift 66
	NUM  shift 67
	IF  shift 68
	'('  shift 69
	.  error

	exp  goto 71
	cmd  goto 93


state 93
	cmd : IF '(' exp ')' '{' cmd . '}'  (40)

	'}'  shift 94
	.  error


state 94
	cmd : IF '(' exp ')' '{' cmd '}' .  (40)

	.  reduce 40


27 terminals, 28 nonterminals
49 grammar rules, 95 states
