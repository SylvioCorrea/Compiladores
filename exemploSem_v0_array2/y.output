   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 dList main

   3  dList : decl dList
   4        |

   5  decl : defFunc
   6       | defStruct
   7       | declVar

   8  $$2 :

   9  $$3 :

  10  defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' '{' $$3 funcDecList funcCmdList '}'

  11  funcType : VOID
  12           | type
  13           | IDENT

  14  maybeParams : lParams
  15              |

  16  lParams : lParams ',' param
  17          | param

  18  param : type IDENT
  19        | STRUCT IDENT IDENT

  20  funcDecList : declVar funcDecList
  21              |

  22  funcCmdList : funcCmdList funcCmd
  23              |

  24  funcCmd : cmd
  25          | RETURN exp ';'

  26  $$4 :

  27  $$5 :

  28  defStruct : DSTRUCT IDENT '{' $$4 lcampos $$5 '}' ';'

  29  $$6 :

  30  declVar : type $$6 TArray Lid ';'

  31  $$7 :

  32  declVar : STRUCT IDENT $$7 Lid ';'

  33  lcampos : lcampos declVar
  34          | declVar

  35  Lid : Lid ',' id
  36      | id

  37  id : IDENT

  38  $$8 :

  39  TArray : '[' NUM ']' $$8 TArray
  40         |

  41  type : INT
  42       | DOUBLE
  43       | BOOL

  44  main : VOID MAIN '(' ')' bloco

  45  bloco : '{' listacmd '}'

  46  listacmd : listacmd cmd
  47           |

  48  cmd : exp ';'
  49      | IF '(' exp ')' '{' cmd '}'

  50  exp : exp '+' exp
  51      | exp '>' exp
  52      | exp AND exp
  53      | NUM
  54      | NUMDOUBLE
  55      | '(' exp ')'
  56      | IDENT

  57  $$9 :

  58  exp : IDENT '.' $$9 restoStruct
  59      | IDENT '(' maybeExp ')'
  60      | exp '=' exp
  61      | exp '[' exp ']'

  62  $$10 :

  63  restoStruct : IDENT '.' $$10 restoStruct
  64              | IDENT

  65  maybeExp : lExp
  66           |

  67  lExp : lExp ',' exp
  68       | exp

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . dList main  (2)
	dList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	DSTRUCT  shift 6
	STRUCT  shift 7
	FUNCTION  shift 8
	VOID  reduce 4

	type  goto 9
	dList  goto 10
	decl  goto 11
	defFunc  goto 12
	defStruct  goto 13
	declVar  goto 14


state 3
	type : INT .  (41)

	.  reduce 41


state 4
	type : DOUBLE .  (42)

	.  reduce 42


state 5
	type : BOOL .  (43)

	.  reduce 43


state 6
	defStruct : DSTRUCT . IDENT '{' $$4 lcampos $$5 '}' ';'  (28)

	IDENT  shift 15
	.  error


state 7
	declVar : STRUCT . IDENT $$7 Lid ';'  (32)

	IDENT  shift 16
	.  error


state 8
	defFunc : FUNCTION . funcType IDENT $$2 '(' maybeParams ')' '{' $$3 funcDecList funcCmdList '}'  (10)

	IDENT  shift 17
	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	VOID  shift 18
	.  error

	type  goto 19
	funcType  goto 20


state 9
	declVar : type . $$6 TArray Lid ';'  (30)
	$$6 : .  (29)

	.  reduce 29

	$$6  goto 21


state 10
	prog : $$1 dList . main  (2)

	VOID  shift 22
	.  error

	main  goto 23


state 11
	dList : decl . dList  (3)
	dList : .  (4)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	DSTRUCT  shift 6
	STRUCT  shift 7
	FUNCTION  shift 8
	VOID  reduce 4

	type  goto 9
	dList  goto 24
	decl  goto 11
	defFunc  goto 12
	defStruct  goto 13
	declVar  goto 14


state 12
	decl : defFunc .  (5)

	.  reduce 5


state 13
	decl : defStruct .  (6)

	.  reduce 6


state 14
	decl : declVar .  (7)

	.  reduce 7


state 15
	defStruct : DSTRUCT IDENT . '{' $$4 lcampos $$5 '}' ';'  (28)

	'{'  shift 25
	.  error


state 16
	declVar : STRUCT IDENT . $$7 Lid ';'  (32)
	$$7 : .  (31)

	.  reduce 31

	$$7  goto 26


state 17
	funcType : IDENT .  (13)

	.  reduce 13


state 18
	funcType : VOID .  (11)

	.  reduce 11


state 19
	funcType : type .  (12)

	.  reduce 12


state 20
	defFunc : FUNCTION funcType . IDENT $$2 '(' maybeParams ')' '{' $$3 funcDecList funcCmdList '}'  (10)

	IDENT  shift 27
	.  error


state 21
	declVar : type $$6 . TArray Lid ';'  (30)
	TArray : .  (40)

	'['  shift 28
	IDENT  reduce 40

	TArray  goto 29


state 22
	main : VOID . MAIN '(' ')' bloco  (44)

	MAIN  shift 30
	.  error


state 23
	prog : $$1 dList main .  (2)

	.  reduce 2


state 24
	dList : decl dList .  (3)

	.  reduce 3


state 25
	defStruct : DSTRUCT IDENT '{' . $$4 lcampos $$5 '}' ';'  (28)
	$$4 : .  (26)

	.  reduce 26

	$$4  goto 31


state 26
	declVar : STRUCT IDENT $$7 . Lid ';'  (32)

	IDENT  shift 32
	.  error

	Lid  goto 33
	id  goto 34


state 27
	defFunc : FUNCTION funcType IDENT . $$2 '(' maybeParams ')' '{' $$3 funcDecList funcCmdList '}'  (10)
	$$2 : .  (8)

	.  reduce 8

	$$2  goto 35


state 28
	TArray : '[' . NUM ']' $$8 TArray  (39)

	NUM  shift 36
	.  error


state 29
	declVar : type $$6 TArray . Lid ';'  (30)

	IDENT  shift 32
	.  error

	Lid  goto 37
	id  goto 34


state 30
	main : VOID MAIN . '(' ')' bloco  (44)

	'('  shift 38
	.  error


state 31
	defStruct : DSTRUCT IDENT '{' $$4 . lcampos $$5 '}' ';'  (28)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 7
	.  error

	type  goto 9
	declVar  goto 39
	lcampos  goto 40


state 32
	id : IDENT .  (37)

	.  reduce 37


state 33
	declVar : STRUCT IDENT $$7 Lid . ';'  (32)
	Lid : Lid . ',' id  (35)

	','  shift 41
	';'  shift 42
	.  error


state 34
	Lid : id .  (36)

	.  reduce 36


state 35
	defFunc : FUNCTION funcType IDENT $$2 . '(' maybeParams ')' '{' $$3 funcDecList funcCmdList '}'  (10)

	'('  shift 43
	.  error


state 36
	TArray : '[' NUM . ']' $$8 TArray  (39)

	']'  shift 44
	.  error


state 37
	declVar : type $$6 TArray Lid . ';'  (30)
	Lid : Lid . ',' id  (35)

	','  shift 41
	';'  shift 45
	.  error


state 38
	main : VOID MAIN '(' . ')' bloco  (44)

	')'  shift 46
	.  error


state 39
	lcampos : declVar .  (34)

	.  reduce 34


state 40
	defStruct : DSTRUCT IDENT '{' $$4 lcampos . $$5 '}' ';'  (28)
	lcampos : lcampos . declVar  (33)
	$$5 : .  (27)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 7
	'}'  reduce 27

	type  goto 9
	declVar  goto 47
	$$5  goto 48


state 41
	Lid : Lid ',' . id  (35)

	IDENT  shift 32
	.  error

	id  goto 49


state 42
	declVar : STRUCT IDENT $$7 Lid ';' .  (32)

	.  reduce 32


state 43
	defFunc : FUNCTION funcType IDENT $$2 '(' . maybeParams ')' '{' $$3 funcDecList funcCmdList '}'  (10)
	maybeParams : .  (15)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 50
	')'  reduce 15

	type  goto 51
	maybeParams  goto 52
	lParams  goto 53
	param  goto 54


state 44
	TArray : '[' NUM ']' . $$8 TArray  (39)
	$$8 : .  (38)

	.  reduce 38

	$$8  goto 55


state 45
	declVar : type $$6 TArray Lid ';' .  (30)

	.  reduce 30


state 46
	main : VOID MAIN '(' ')' . bloco  (44)

	'{'  shift 56
	.  error

	bloco  goto 57


state 47
	lcampos : lcampos declVar .  (33)

	.  reduce 33


state 48
	defStruct : DSTRUCT IDENT '{' $$4 lcampos $$5 . '}' ';'  (28)

	'}'  shift 58
	.  error


state 49
	Lid : Lid ',' id .  (35)

	.  reduce 35


state 50
	param : STRUCT . IDENT IDENT  (19)

	IDENT  shift 59
	.  error


state 51
	param : type . IDENT  (18)

	IDENT  shift 60
	.  error


state 52
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams . ')' '{' $$3 funcDecList funcCmdList '}'  (10)

	')'  shift 61
	.  error


state 53
	maybeParams : lParams .  (14)
	lParams : lParams . ',' param  (16)

	','  shift 62
	')'  reduce 14


state 54
	lParams : param .  (17)

	.  reduce 17


state 55
	TArray : '[' NUM ']' $$8 . TArray  (39)
	TArray : .  (40)

	'['  shift 28
	IDENT  reduce 40

	TArray  goto 63


state 56
	bloco : '{' . listacmd '}'  (45)
	listacmd : .  (47)

	.  reduce 47

	listacmd  goto 64


state 57
	main : VOID MAIN '(' ')' bloco .  (44)

	.  reduce 44


state 58
	defStruct : DSTRUCT IDENT '{' $$4 lcampos $$5 '}' . ';'  (28)

	';'  shift 65
	.  error


state 59
	param : STRUCT IDENT . IDENT  (19)

	IDENT  shift 66
	.  error


state 60
	param : type IDENT .  (18)

	.  reduce 18


state 61
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' . '{' $$3 funcDecList funcCmdList '}'  (10)

	'{'  shift 67
	.  error


state 62
	lParams : lParams ',' . param  (16)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 50
	.  error

	type  goto 51
	param  goto 68


state 63
	TArray : '[' NUM ']' $$8 TArray .  (39)

	.  reduce 39


state 64
	bloco : '{' listacmd . '}'  (45)
	listacmd : listacmd . cmd  (46)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	IF  shift 72
	'('  shift 73
	'}'  shift 74
	.  error

	exp  goto 75
	cmd  goto 76


state 65
	defStruct : DSTRUCT IDENT '{' $$4 lcampos $$5 '}' ';' .  (28)

	.  reduce 28


state 66
	param : STRUCT IDENT IDENT .  (19)

	.  reduce 19


state 67
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' '{' . $$3 funcDecList funcCmdList '}'  (10)
	$$3 : .  (9)

	.  reduce 9

	$$3  goto 77


state 68
	lParams : lParams ',' param .  (16)

	.  reduce 16


state 69
	exp : IDENT .  (56)
	exp : IDENT . '.' $$9 restoStruct  (58)
	exp : IDENT . '(' maybeExp ')'  (59)

	'('  shift 78
	'.'  shift 79
	AND  reduce 56
	'='  reduce 56
	'>'  reduce 56
	'+'  reduce 56
	'['  reduce 56
	')'  reduce 56
	','  reduce 56
	';'  reduce 56
	']'  reduce 56


state 70
	exp : NUM .  (53)

	.  reduce 53


state 71
	exp : NUMDOUBLE .  (54)

	.  reduce 54


state 72
	cmd : IF . '(' exp ')' '{' cmd '}'  (49)

	'('  shift 80
	.  error


state 73
	exp : '(' . exp ')'  (55)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 81


state 74
	bloco : '{' listacmd '}' .  (45)

	.  reduce 45


state 75
	cmd : exp . ';'  (48)
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	';'  shift 87
	.  error


state 76
	listacmd : listacmd cmd .  (46)

	.  reduce 46


state 77
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' '{' $$3 . funcDecList funcCmdList '}'  (10)
	funcDecList : .  (21)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 7
	IDENT  reduce 21
	NUM  reduce 21
	NUMDOUBLE  reduce 21
	IF  reduce 21
	RETURN  reduce 21
	'('  reduce 21
	'}'  reduce 21

	type  goto 9
	declVar  goto 88
	funcDecList  goto 89


state 78
	exp : IDENT '(' . maybeExp ')'  (59)
	maybeExp : .  (66)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	')'  reduce 66

	exp  goto 90
	maybeExp  goto 91
	lExp  goto 92


state 79
	exp : IDENT '.' . $$9 restoStruct  (58)
	$$9 : .  (57)

	.  reduce 57

	$$9  goto 93


state 80
	cmd : IF '(' . exp ')' '{' cmd '}'  (49)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 94


state 81
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : '(' exp . ')'  (55)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	')'  shift 95
	.  error


state 82
	exp : exp AND . exp  (52)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 96


state 83
	exp : exp '=' . exp  (60)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 97


state 84
	exp : exp '>' . exp  (51)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 98


state 85
	exp : exp '+' . exp  (50)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 99


state 86
	exp : exp '[' . exp ']'  (61)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 100


state 87
	cmd : exp ';' .  (48)

	.  reduce 48


state 88
	funcDecList : declVar . funcDecList  (20)
	funcDecList : .  (21)

	INT  shift 3
	DOUBLE  shift 4
	BOOL  shift 5
	STRUCT  shift 7
	IDENT  reduce 21
	NUM  reduce 21
	NUMDOUBLE  reduce 21
	IF  reduce 21
	RETURN  reduce 21
	'('  reduce 21
	'}'  reduce 21

	type  goto 9
	declVar  goto 88
	funcDecList  goto 101


state 89
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' '{' $$3 funcDecList . funcCmdList '}'  (10)
	funcCmdList : .  (23)

	.  reduce 23

	funcCmdList  goto 102


state 90
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)
	lExp : exp .  (68)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	')'  reduce 68
	','  reduce 68


state 91
	exp : IDENT '(' maybeExp . ')'  (59)

	')'  shift 103
	.  error


state 92
	maybeExp : lExp .  (65)
	lExp : lExp . ',' exp  (67)

	','  shift 104
	')'  reduce 65


state 93
	exp : IDENT '.' $$9 . restoStruct  (58)

	IDENT  shift 105
	.  error

	restoStruct  goto 106


state 94
	cmd : IF '(' exp . ')' '{' cmd '}'  (49)
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	')'  shift 107
	.  error


state 95
	exp : '(' exp ')' .  (55)

	.  reduce 55


state 96
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp AND exp .  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	'['  shift 86
	AND  reduce 52
	'='  reduce 52
	'>'  reduce 52
	'+'  reduce 52
	')'  reduce 52
	','  reduce 52
	';'  reduce 52
	']'  reduce 52


state 97
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp '=' exp .  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	')'  reduce 60
	','  reduce 60
	';'  reduce 60
	']'  reduce 60


state 98
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp '>' exp .  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'+'  shift 85
	'['  shift 86
	'='  reduce 51
	')'  reduce 51
	','  reduce 51
	';'  reduce 51
	']'  reduce 51


state 99
	exp : exp . '+' exp  (50)
	exp : exp '+' exp .  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'['  shift 86
	'='  reduce 50
	'>'  reduce 50
	'+'  reduce 50
	')'  reduce 50
	','  reduce 50
	';'  reduce 50
	']'  reduce 50


state 100
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)
	exp : exp '[' exp . ']'  (61)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	']'  shift 108
	.  error


state 101
	funcDecList : declVar funcDecList .  (20)

	.  reduce 20


state 102
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' '{' $$3 funcDecList funcCmdList . '}'  (10)
	funcCmdList : funcCmdList . funcCmd  (22)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	IF  shift 72
	RETURN  shift 109
	'('  shift 73
	'}'  shift 110
	.  error

	exp  goto 75
	funcCmd  goto 111
	cmd  goto 112


state 103
	exp : IDENT '(' maybeExp ')' .  (59)

	.  reduce 59


state 104
	lExp : lExp ',' . exp  (67)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 113


state 105
	restoStruct : IDENT . '.' $$10 restoStruct  (63)
	restoStruct : IDENT .  (64)

	'.'  shift 114
	AND  reduce 64
	'='  reduce 64
	'>'  reduce 64
	'+'  reduce 64
	'['  reduce 64
	')'  reduce 64
	','  reduce 64
	';'  reduce 64
	']'  reduce 64


state 106
	exp : IDENT '.' $$9 restoStruct .  (58)

	.  reduce 58


state 107
	cmd : IF '(' exp ')' . '{' cmd '}'  (49)

	'{'  shift 115
	.  error


state 108
	exp : exp '[' exp ']' .  (61)

	.  reduce 61


state 109
	funcCmd : RETURN . exp ';'  (25)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	'('  shift 73
	.  error

	exp  goto 116


state 110
	defFunc : FUNCTION funcType IDENT $$2 '(' maybeParams ')' '{' $$3 funcDecList funcCmdList '}' .  (10)

	.  reduce 10


state 111
	funcCmdList : funcCmdList funcCmd .  (22)

	.  reduce 22


state 112
	funcCmd : cmd .  (24)

	.  reduce 24


state 113
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)
	lExp : lExp ',' exp .  (67)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	')'  reduce 67
	','  reduce 67


state 114
	restoStruct : IDENT '.' . $$10 restoStruct  (63)
	$$10 : .  (62)

	.  reduce 62

	$$10  goto 117


state 115
	cmd : IF '(' exp ')' '{' . cmd '}'  (49)

	IDENT  shift 69
	NUM  shift 70
	NUMDOUBLE  shift 71
	IF  shift 72
	'('  shift 73
	.  error

	exp  goto 75
	cmd  goto 118


state 116
	funcCmd : RETURN exp . ';'  (25)
	exp : exp . '+' exp  (50)
	exp : exp . '>' exp  (51)
	exp : exp . AND exp  (52)
	exp : exp . '=' exp  (60)
	exp : exp . '[' exp ']'  (61)

	AND  shift 82
	'='  shift 83
	'>'  shift 84
	'+'  shift 85
	'['  shift 86
	';'  shift 119
	.  error


state 117
	restoStruct : IDENT '.' $$10 . restoStruct  (63)

	IDENT  shift 105
	.  error

	restoStruct  goto 120


state 118
	cmd : IF '(' exp ')' '{' cmd . '}'  (49)

	'}'  shift 121
	.  error


state 119
	funcCmd : RETURN exp ';' .  (25)

	.  reduce 25


state 120
	restoStruct : IDENT '.' $$10 restoStruct .  (63)

	.  reduce 63


state 121
	cmd : IF '(' exp ')' '{' cmd '}' .  (49)

	.  reduce 49


30 terminals, 37 nonterminals
69 grammar rules, 122 states
